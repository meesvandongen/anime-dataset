// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise";
import { OpenAPI } from "./core/OpenAPI";
import { request as __request } from "./core/request";
import type { $OpenApiTs } from "./models";

export class AnimeService {
  /**
   * Get anime list
   * @returns AnimeList OK
   * @throws ApiError
   */
  public static animeGet(
    data: $OpenApiTs["/anime"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/anime"]["get"]["res"][200]> {
    const { q, limit, offset, fields, nsfw } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/anime",
      query: {
        q,
        limit,
        offset,
        fields,
        nsfw,
      },
    });
  }

  /**
   * Get anime details
   * @returns AnimeForDetails OK
   * @throws ApiError
   */
  public static animeAnimeIdGet(
    data: $OpenApiTs["/anime/{anime_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/anime/{anime_id}"]["get"]["res"][200]> {
    const { animeId, fields } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/anime/{anime_id}",
      path: {
        anime_id: animeId,
      },
      query: {
        fields,
      },
    });
  }

  /**
   * Get anime ranking
   * The returned anime contains the `ranking` field.
   *
   * @returns AnimeListForRanking OK
   * @throws ApiError
   */
  public static animeRankingGet(
    data: $OpenApiTs["/anime/ranking"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/anime/ranking"]["get"]["res"][200]> {
    const { rankingType, limit, offset, fields, nsfw } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/anime/ranking",
      query: {
        ranking_type: rankingType,
        limit,
        offset,
        fields,
        nsfw,
      },
    });
  }

  /**
   * Get seasonal anime
   * Get seasonal anime.
   *
   * | Season name | Months |
   * | ---- | ---- |
   * | winter | January, February, March |
   * | spring | April, May, June |
   * | summer | July, August, September |
   * | fall | October, November, December |
   *
   * @returns AnimeList OK
   * @throws ApiError
   */
  public static animeSeasonYearSeasonGet(
    data: $OpenApiTs["/anime/season/{year}/{season}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/anime/season/{year}/{season}"]["get"]["res"][200]
  > {
    const { year, season, sort, limit, offset, fields, nsfw } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/anime/season/{year}/{season}",
      path: {
        year,
        season,
      },
      query: {
        sort,
        limit,
        offset,
        fields,
        nsfw,
      },
    });
  }

  /**
   * Get suggested anime
   * Returns suggested anime for the authorized user.
   *
   * If the user is new comer, this endpoint returns an empty list.
   *
   * @returns AnimeList OK.
   * @throws ApiError
   */
  public static animeSuggestionsGet(
    data: $OpenApiTs["/anime/suggestions"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/anime/suggestions"]["get"]["res"][200]> {
    const { limit, offset, fields } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/anime/suggestions",
      query: {
        limit,
        offset,
        fields,
      },
    });
  }
}

export class UserAnimelistService {
  /**
   * Update my anime list status
   * Add specified anime to my anime list.
   *
   * If specified anime already exists, update its status.
   *
   * This endpoint updates only values specified by the parameter.
   *
   * @returns AnimeListStatus OK
   * @throws ApiError
   */
  public static animeAnimeIdMyListStatusPut(
    data: $OpenApiTs["/anime/{anime_id}/my_list_status"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/anime/{anime_id}/my_list_status"]["patch"]["res"][200]
  > {
    const { animeId, formData } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/anime/{anime_id}/my_list_status",
      path: {
        anime_id: animeId,
      },
      formData: formData,
      mediaType: "application/x-www-form-urlencoded",
    });
  }

  /**
   * Delete my anime list item.
   * If the specified anime does not exist in user's anime list, this endpoint does nothing
   * and returns `404 Not Found`.
   *
   * So be careful when retrying.
   *
   * @returns any OK
   * @throws ApiError
   */
  public static animeAnimeIdMyListStatusDelete(
    data: $OpenApiTs["/anime/{anime_id}/my_list_status"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/anime/{anime_id}/my_list_status"]["delete"]["res"][200]
  > {
    const { animeId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/anime/{anime_id}/my_list_status",
      path: {
        anime_id: animeId,
      },
      errors: {
        404: `Not Found`,
      },
    });
  }

  /**
   * Get user anime list
   * @returns UserAnimeList OK
   * @throws ApiError
   */
  public static usersUserIdAnimelistGet(
    data: $OpenApiTs["/users/{user_name}/animelist"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/users/{user_name}/animelist"]["get"]["res"][200]
  > {
    const { userName, status, sort, limit, offset } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{user_name}/animelist",
      path: {
        user_name: userName,
      },
      query: {
        status,
        sort,
        limit,
        offset,
      },
    });
  }
}

export class ForumService {
  /**
   * Get forum boards
   * @returns ForumBoards OK
   * @throws ApiError
   */
  public static forumBoardsGet(): CancelablePromise<
    $OpenApiTs["/forum/boards"]["get"]["res"][200]
  > {
    return __request(OpenAPI, {
      method: "GET",
      url: "/forum/boards",
    });
  }

  /**
   * Get forum topic detail
   * @returns ForumTopic OK
   * @throws ApiError
   */
  public static forumTopicGet(
    data: $OpenApiTs["/forum/topic/{topic_id}"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/forum/topic/{topic_id}"]["get"]["res"][200]
  > {
    const { topicId, limit, offset } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/forum/topic/{topic_id}",
      path: {
        topic_id: topicId,
      },
      query: {
        limit,
        offset,
      },
    });
  }

  /**
   * Get forum topics
   * @returns ForumTopics OK
   * @throws ApiError
   */
  public static forumTopicsGet(
    data: $OpenApiTs["/forum/topics"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/forum/topics"]["get"]["res"][200]> {
    const {
      boardId,
      subboardId,
      limit,
      offset,
      sort,
      q,
      topicUserName,
      userName,
    } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/forum/topics",
      query: {
        board_id: boardId,
        subboard_id: subboardId,
        limit,
        offset,
        sort,
        q,
        topic_user_name: topicUserName,
        user_name: userName,
      },
    });
  }
}

export class MangaService {
  /**
   * Get manga list
   * @returns MangaList OK
   * @throws ApiError
   */
  public static mangaGet(
    data: $OpenApiTs["/manga"]["get"]["req"] = {},
  ): CancelablePromise<$OpenApiTs["/manga"]["get"]["res"][200]> {
    const { q, limit, offset, fields, nsfw } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/manga",
      query: {
        q,
        limit,
        offset,
        fields,
        nsfw,
      },
    });
  }

  /**
   * Get manga details
   * @returns MangaForDetails OK
   * @throws ApiError
   */
  public static mangaMangaIdGet(
    data: $OpenApiTs["/manga/{manga_id}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/manga/{manga_id}"]["get"]["res"][200]> {
    const { mangaId, fields } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/manga/{manga_id}",
      path: {
        manga_id: mangaId,
      },
      query: {
        fields,
      },
    });
  }

  /**
   * Get manga ranking
   * The returned manga contains the `ranking` field.
   *
   * @returns MangaListForRanking OK
   * @throws ApiError
   */
  public static mangaRankingGet(
    data: $OpenApiTs["/manga/ranking"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/manga/ranking"]["get"]["res"][200]> {
    const { rankingType, limit, offset, fields, nsfw } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/manga/ranking",
      query: {
        ranking_type: rankingType,
        limit,
        offset,
        fields,
        nsfw,
      },
    });
  }
}

export class UserMangalistService {
  /**
   * Update my manga list status
   * Add specified manga to my manga list.
   *
   * If specified manga already exists, update its status.
   *
   * This endpoint updates only values specified by the parameter.
   *
   * @returns MangaListStatus OK
   * @throws ApiError
   */
  public static mangaMangaIdMyListStatusPut(
    data: $OpenApiTs["/manga/{manga_id}/my_list_status"]["patch"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/manga/{manga_id}/my_list_status"]["patch"]["res"][200]
  > {
    const { mangaId, formData } = data;
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/manga/{manga_id}/my_list_status",
      path: {
        manga_id: mangaId,
      },
      formData: formData,
      mediaType: "application/x-www-form-urlencoded",
    });
  }

  /**
   * Delete my manga list item.
   * If the specified manga does not exist in user's manga list, this endpoint does nothing
   * and returns `404 Not Found`.
   *
   * So be careful when retrying.
   *
   * @returns any OK
   * @throws ApiError
   */
  public static mangaMangaIdMyListStatusDelete(
    data: $OpenApiTs["/manga/{manga_id}/my_list_status"]["delete"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/manga/{manga_id}/my_list_status"]["delete"]["res"][200]
  > {
    const { mangaId } = data;
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/manga/{manga_id}/my_list_status",
      path: {
        manga_id: mangaId,
      },
      errors: {
        404: `Not Found`,
      },
    });
  }

  /**
   * Get user manga list
   * @returns UserMangaList OK
   * @throws ApiError
   */
  public static usersUserIdMangalistGet(
    data: $OpenApiTs["/users/{user_name}/mangalist"]["get"]["req"],
  ): CancelablePromise<
    $OpenApiTs["/users/{user_name}/mangalist"]["get"]["res"][200]
  > {
    const { userName, status, sort, limit, offset } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{user_name}/mangalist",
      path: {
        user_name: userName,
      },
      query: {
        status,
        sort,
        limit,
        offset,
      },
    });
  }
}

export class UserService {
  /**
   * Get my user information
   * @returns User OK
   * @throws ApiError
   */
  public static usersUserIdGet(
    data: $OpenApiTs["/users/{user_name}"]["get"]["req"],
  ): CancelablePromise<$OpenApiTs["/users/{user_name}"]["get"]["res"][200]> {
    const { userId, fields } = data;
    return __request(OpenAPI, {
      method: "GET",
      url: "/users/{user_name}",
      path: {
        user_id: userId,
      },
      query: {
        fields,
      },
    });
  }
}
