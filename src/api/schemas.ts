// This file is auto-generated by @hey-api/openapi-ts

export const $AnimeForDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/AnimeForList",
    },
    {
      type: "object",
      description: "",
      properties: {
        pictures: {
          type: "array",
          description: `You cannot contain this field in a list.
`,
          items: {
            $ref: "#/components/schemas/Picture",
          },
          nullable: false,
        },
        background: {
          type: "string",
          description: `The API strips BBCode tags from the result.

You cannot contain this field in a list. 
`,
          nullable: true,
        },
        related_anime: {
          type: "array",
          description: `You cannot contain this field in a list.
`,
          items: {
            $ref: "#/components/schemas/RelatedAnimeEdge",
          },
          nullable: false,
        },
        related_manga: {
          type: "array",
          description: `You cannot contain this field in a list.
`,
          items: {
            $ref: "#/components/schemas/RelatedMangaEdge",
          },
          nullable: false,
        },
        recommendations: {
          type: "array",
          description: `Summary of recommended anime for those who like this anime.

You cannot contain this field in a list.
`,
          items: {
            $ref: "#/components/schemas/AnimeRecommendationAggregationEdgeBase",
          },
          nullable: false,
        },
        statistics: {
          allOf: [
            {
              type: "object",
              description: `You cannot contain this field in a list.
`,
              nullable: true,
            },
            {
              $ref: "#/components/schemas/AnimeStatistics",
            },
          ],
        },
      },
    },
  ],
} as const;

export const $AnimeForList = {
  allOf: [
    {
      $ref: "#/components/schemas/WorkForList",
    },
    {
      type: "object",
      description: "",
      properties: {
        media_type: {
          type: "string",
          description: `- unknown
- tv
- ova
- movie
- special
- ona
- music
`,
          nullable: false,
        },
        status: {
          type: "string",
          description: `Airing status.
 
- finished_airing
- currently_airing
- not_yet_aired
`,
          nullable: false,
        },
        my_list_status: {
          allOf: [
            {
              type: "object",
              description: `Status of user's anime list. If there is no access token, the API excludes this field.
`,
              nullable: true,
            },
            {
              $ref: "#/components/schemas/AnimeListStatus",
            },
          ],
        },
        num_episodes: {
          type: "integer",
          description: `The total number of episodes of this series. If unknown, it is 0.
`,
          nullable: false,
        },
        start_season: {
          allOf: [
            {
              nullable: true,
            },
            {
              $ref: "#/components/schemas/AnimeSeason",
            },
          ],
        },
        broadcast: {
          type: "object",
          description: `Broadcast date.
`,
          properties: {
            day_of_the_week: {
              type: "string",
              description: `Day of the week broadcast in Japan time.

Day of the week or \`other\`
`,
              nullable: false,
            },
            start_time: {
              type: "string",
              description: `for example: "01:25"
`,
              nullable: true,
            },
          },
          nullable: true,
        },
        source: {
          type: "string",
          description: `Original work.

- other
- original
- manga
- 4_koma_manga
- web_manga
- digital_manga
- novel
- light_novel
- visual_novel
- game
- card_game
- book
- picture_book
- radio
- music
`,
          nullable: true,
        },
        average_episode_duration: {
          type: "integer",
          description: `Average length of episode in seconds.
`,
          nullable: true,
        },
        rating: {
          type: "string",
          description: `| Value | Description |
| ---- | ---- |
| g | G - All Ages |
| pg | PG - Children |
| pg_13 | pg_13 - Teens 13 and Older |
| r | R - 17+ (violence & profanity) |
| r+ | R+ - Profanity & Mild Nudity |
| rx | Rx - Hentai |
`,
          nullable: true,
        },
        studios: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/AnimeStudio",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $AnimeList = {
  allOf: [
    {
      type: "object",
      properties: {
        data: {
          type: "array",
          items: {
            type: "object",
            properties: {
              node: {
                $ref: "#/components/schemas/AnimeForList",
              },
            },
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/List",
    },
  ],
} as const;

export const $AnimeListForRanking = {
  allOf: [
    {
      type: "object",
      properties: {
        data: {
          type: "array",
          items: {
            type: "object",
            properties: {
              node: {
                $ref: "#/components/schemas/AnimeForList",
              },
              ranking: {
                $ref: "#/components/schemas/RankingInfo",
              },
            },
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/List",
    },
  ],
} as const;

export const $AnimeListStatus = {
  type: "object",
  properties: {
    status: {
      type: "string",
      description: `- watching
- completed
- on_hold
- dropped
- plan_to_watch
`,
      nullable: true,
    },
    score: {
      type: "integer",
      description: `0-10
`,
      nullable: false,
    },
    num_episodes_watched: {
      type: "integer",
      description: `0 or the number of watched episodes. 
`,
      nullable: false,
    },
    is_rewatching: {
      type: "boolean",
      description: `If authorized user watches an anime again after completion, this field value is true.

In this case, MyAnimeList treats the anime as 'watching' in the user's anime list.
`,
      nullable: false,
    },
    start_date: {
      type: "string",
      format: "date",
      description: "",
      nullable: true,
    },
    finish_date: {
      type: "string",
      format: "date",
      description: "",
      nullable: true,
    },
    priority: {
      type: "integer",
      description: "",
      nullable: false,
    },
    num_times_rewatched: {
      type: "integer",
      description: "",
      nullable: false,
    },
    rewatch_value: {
      type: "integer",
      description: "",
      nullable: false,
    },
    tags: {
      type: "array",
      description: "",
      items: {
        type: "string",
      },
      nullable: false,
    },
    comments: {
      type: "string",
      description: `You cannot contain this field in a list.
`,
      nullable: false,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $AnimeRecommendationAggregationEdgeBase = {
  type: "object",
  properties: {
    node: {
      $ref: "#/components/schemas/AnimeForList",
    },
    num_recommendations: {
      type: "integer",
      nullable: false,
    },
  },
} as const;

export const $AnimeSeason = {
  type: "object",
  description: "",
  properties: {
    year: {
      type: "integer",
      nullable: false,
    },
    season: {
      type: "string",
      enum: ["winter", "spring", "summer", "fall"],
      nullable: false,
    },
  },
} as const;

export const $AnimeStatistics = {
  type: "object",
  description: "",
  properties: {
    num_list_users: {
      type: "integer",
      nullable: false,
    },
    status: {
      type: "object",
      properties: {
        watching: {
          type: "integer",
        },
        completed: {
          type: "integer",
        },
        on_hold: {
          type: "integer",
        },
        dropped: {
          type: "integer",
        },
        plan_to_watch: {
          type: "integer",
        },
      },
      nullable: false,
    },
  },
} as const;

export const $AnimeStudio = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    name: {
      type: "string",
      nullable: false,
    },
  },
} as const;

export const $Date = {
  description: "date.",
  type: "string",
  example: "2022-03-10T03:08:53.700Z",
} as const;

export const $ForumBoard = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        id: {
          type: "integer",
          description: "",
          nullable: false,
        },
        title: {
          type: "string",
          description: "",
          nullable: false,
        },
        description: {
          type: "string",
          description: "",
          nullable: false,
        },
        subboards: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumSubboard",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $ForumBoards = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        categories: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumCategory",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $ForumCategory = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        title: {
          type: "string",
          description: "",
          nullable: false,
        },
        boards: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumBoard",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $ForumSubboard = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    title: {
      type: "string",
      nullable: false,
    },
  },
} as const;

export const $ForumTopic = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        data: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumTopicData",
          },
          nullable: false,
        },
        paging: {
          $ref: "#/components/schemas/ForumTopicPaging",
        },
      },
    },
  ],
} as const;

export const $ForumTopicData = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        title: {
          type: "string",
          description: "",
          nullable: false,
        },
        posts: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumTopicPost",
          },
          nullable: false,
        },
        poll: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumTopicPoll",
          },
          nullable: true,
        },
      },
    },
  ],
} as const;

export const $ForumTopicPaging = {
  type: "object",
  description: "",
  properties: {
    previous: {
      type: "string",
      nullable: true,
    },
    next: {
      type: "string",
      nullable: true,
    },
  },
} as const;

export const $ForumTopicPoll = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        id: {
          type: "integer",
          description: "",
          nullable: false,
        },
        question: {
          type: "string",
          description: "",
          nullable: false,
        },
        close: {
          type: "boolean",
          description: "",
          nullable: false,
        },
        options: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumTopicPollOption",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $ForumTopicPollOption = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      description: "",
      nullable: false,
    },
    text: {
      type: "string",
      description: "",
      nullable: false,
    },
    votes: {
      type: "integer",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $ForumTopicPost = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        id: {
          type: "integer",
          description: "",
          nullable: false,
        },
        number: {
          type: "integer",
          description: "",
          nullable: false,
        },
        created_at: {
          type: "string",
          format: "date-time",
          description: "",
          nullable: false,
        },
        created_by: {
          $ref: "#/components/schemas/ForumTopicPostCreatedBy",
        },
        body: {
          type: "string",
          description: "",
          nullable: false,
        },
        signature: {
          type: "string",
          description: "",
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $ForumTopicPostCreatedBy = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    name: {
      type: "string",
      nullable: false,
    },
    forum_avator: {
      type: "string",
      nullable: false,
    },
  },
} as const;

export const $ForumTopics = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        data: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/ForumTopicsData",
          },
          nullable: false,
        },
        paging: {
          $ref: "#/components/schemas/ForumTopicPaging",
        },
      },
    },
  ],
} as const;

export const $ForumTopicsCreatedBy = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    name: {
      type: "string",
      nullable: false,
    },
  },
} as const;

export const $ForumTopicsData = {
  allOf: [
    {
      type: "object",
      description: "",
      properties: {
        id: {
          type: "integer",
          description: "",
          nullable: false,
        },
        title: {
          type: "string",
          description: "",
          nullable: false,
        },
        created_at: {
          type: "string",
          format: "date-time",
          description: "",
          nullable: false,
        },
        created_by: {
          $ref: "#/components/schemas/ForumTopicsCreatedBy",
        },
        number_of_posts: {
          type: "integer",
          description: "",
          nullable: false,
        },
        last_post_created_at: {
          type: "string",
          format: "date-time",
          description: "",
          nullable: false,
        },
        last_post_created_by: {
          $ref: "#/components/schemas/ForumTopicsCreatedBy",
        },
        is_locked: {
          type: "boolean",
          description: "",
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $Genre = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    name: {
      type: "string",
      nullable: false,
    },
  },
} as const;

export const $List = {
  type: "object",
  description: "",
  properties: {
    paging: {
      type: "object",
      properties: {
        previous: {
          type: "string",
        },
        next: {
          type: "string",
        },
      },
    },
  },
} as const;

export const $Magazine = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    name: {
      type: "string",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $MangaForDetails = {
  allOf: [
    {
      $ref: "#/components/schemas/MangaForList",
    },
    {
      type: "object",
      description: "",
      properties: {
        pictures: {
          type: "array",
          description: `You cannot contain this field in a list. 
`,
          items: {
            $ref: "#/components/schemas/Picture",
          },
          nullable: false,
        },
        background: {
          type: "string",
          description: `The API strips BBCode tags from the result.

You cannot contain this field in a list.  
`,
          nullable: true,
        },
        related_anime: {
          type: "array",
          description: `You cannot contain this field in a list. 
`,
          items: {
            $ref: "#/components/schemas/RelatedAnimeEdge",
          },
          nullable: false,
        },
        related_manga: {
          type: "array",
          description: `You cannot contain this field in a list. 
`,
          items: {
            $ref: "#/components/schemas/RelatedMangaEdge",
          },
          nullable: false,
        },
        recommendations: {
          type: "array",
          description: `Summary of recommended anime for those who like this manga.

You cannot contain this field in a list. 
`,
          items: {
            $ref: "#/components/schemas/MangaRecommendationAggregationEdgeBase",
          },
          nullable: false,
        },
        serialization: {
          type: "array",
          description: `You cannot contain this field in a list.
`,
          items: {
            $ref: "#/components/schemas/MangaMagazineRelationEdge",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $MangaForList = {
  allOf: [
    {
      $ref: "#/components/schemas/WorkForList",
    },
    {
      type: "object",
      description: "",
      properties: {
        media_type: {
          type: "string",
          description: `- unknown
- manga
- novel
- one_shot
- doujinshi
- manhwa
- manhua
- oel
`,
          nullable: false,
        },
        status: {
          type: "string",
          description: `Publishing status.

- finished
- currently_publishing
- not_yet_published
`,
          nullable: false,
        },
        my_list_status: {
          allOf: [
            {
              type: "object",
              description: `Status of user's manga list. If there is no access token, the API excludes this field.
`,
              nullable: true,
            },
            {
              $ref: "#/components/schemas/MangaListStatus",
            },
          ],
        },
        num_volumes: {
          type: "integer",
          description: `If unknown, it is 0.
`,
          nullable: false,
        },
        num_chapters: {
          type: "integer",
          description: `If unknown, it is 0.
`,
          nullable: false,
        },
        authors: {
          type: "array",
          items: {
            $ref: "#/components/schemas/PersonRoleEdge",
          },
          nullable: false,
        },
      },
    },
  ],
} as const;

export const $MangaList = {
  allOf: [
    {
      type: "object",
      properties: {
        data: {
          type: "array",
          items: {
            type: "object",
            properties: {
              node: {
                $ref: "#/components/schemas/MangaForList",
              },
            },
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/List",
    },
  ],
} as const;

export const $MangaListForRanking = {
  allOf: [
    {
      type: "object",
      properties: {
        data: {
          type: "array",
          items: {
            type: "object",
            properties: {
              node: {
                $ref: "#/components/schemas/MangaForList",
              },
              ranking: {
                $ref: "#/components/schemas/RankingInfo",
              },
            },
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/List",
    },
  ],
} as const;

export const $MangaListStatus = {
  type: "object",
  properties: {
    status: {
      type: "string",
      description: `- reading
- completed
- on_hold
- dropped
- plan_to_read
`,
      nullable: true,
    },
    score: {
      type: "integer",
      description: `0-10
`,
      nullable: false,
    },
    num_volumes_read: {
      type: "integer",
      description: `0 or the number of read volumes. 
`,
      nullable: false,
    },
    num_chapters_read: {
      type: "integer",
      description: `0 or the number of read chapters. 
`,
      nullable: false,
    },
    is_rereading: {
      type: "boolean",
      description: `If authorized user reads an manga again after completion, this field value is true.

In this case, MyAnimeList treats the manga as 'reading' in the user's manga list.
`,
      nullable: false,
    },
    start_date: {
      type: "string",
      format: "date",
      description: "",
      nullable: true,
    },
    finish_date: {
      type: "string",
      format: "date",
      description: "",
      nullable: true,
    },
    priority: {
      type: "integer",
      description: "",
      nullable: false,
    },
    num_times_reread: {
      type: "integer",
      description: "",
      nullable: false,
    },
    reread_value: {
      type: "integer",
      description: "",
      nullable: false,
    },
    tags: {
      type: "array",
      description: "",
      items: {
        type: "string",
      },
      nullable: false,
    },
    comments: {
      type: "string",
      description: `You cannot contain this field in a list.
`,
      nullable: false,
    },
    updated_at: {
      type: "string",
      format: "date-time",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $MangaMagazineRelationEdge = {
  type: "object",
  description: "",
  properties: {
    node: {
      $ref: "#/components/schemas/Magazine",
    },
    role: {
      type: "string",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $MangaRecommendationAggregationEdgeBase = {
  type: "object",
  properties: {
    node: {
      $ref: "#/components/schemas/MangaForList",
    },
    num_recommendations: {
      type: "integer",
      nullable: false,
    },
  },
} as const;

export const $PersonBase = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    first_name: {
      type: "string",
      description: "",
      nullable: false,
    },
    last_name: {
      type: "string",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $PersonRoleEdge = {
  type: "object",
  description: "",
  properties: {
    node: {
      $ref: "#/components/schemas/PersonBase",
    },
    role: {
      type: "string",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $Picture = {
  type: "object",
  description: "",
  properties: {
    large: {
      type: "string",
      format: "uri",
      description: "",
      nullable: true,
    },
    medium: {
      type: "string",
      format: "uri",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $RankingInfo = {
  type: "object",
  description: `Ranking information.
`,
  properties: {
    rank: {
      type: "integer",
      description: "Current rank.",
      nullable: false,
    },
    previous_rank: {
      type: "integer",
      description: "previous rank.",
      nullable: true,
    },
  },
} as const;

export const $RelatedAnimeEdge = {
  type: "object",
  description: "",
  properties: {
    node: {
      $ref: "#/components/schemas/AnimeForList",
    },
    relation_type: {
      type: "string",
      description: `The type of the relationship between this work and related work.

- sequel
- prequel
- alternative_setting
- alternative_version
- side_story
- parent_story
- summary
- full_story
`,
      nullable: false,
    },
    relation_type_formatted: {
      type: "string",
      description: `The format of relation_type for human like "Alternative version".
`,
      nullable: false,
    },
  },
} as const;

export const $RelatedMangaEdge = {
  type: "object",
  description: "",
  properties: {
    node: {
      $ref: "#/components/schemas/MangaForList",
    },
    relation_type: {
      type: "string",
      description: `The type of the relationship between this work and related work.

- sequel
- prequel
- alternative_setting
- alternative_version
- side_story
- parent_story
- summary
- full_story
`,
      nullable: false,
    },
    relation_type_formatted: {
      type: "string",
      description: `The format of relation_type for human like "Alternative version".
`,
      nullable: false,
    },
  },
} as const;

export const $User = {
  allOf: [
    {
      $ref: "#/components/schemas/UserBase",
    },
    {
      type: "object",
      description: "",
      properties: {
        gender: {
          type: "string",
          description: "",
          nullable: true,
        },
        birthday: {
          type: "string",
          format: "date",
          description: "",
          nullable: true,
        },
        location: {
          type: "string",
          description: "",
          nullable: true,
        },
        joined_at: {
          type: "string",
          format: "date-time",
          description: "",
          nullable: false,
        },
        anime_statistics: {
          type: "object",
          "x-optional": true,
          description: "",
          properties: {
            num_items_watching: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_items_completed: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_items_on_hold: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_items_dropped: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_items_plan_to_watch: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_items: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_days_watched: {
              type: "number",
              format: "float",
              description: "",
              nullable: false,
            },
            num_days_watching: {
              type: "number",
              format: "float",
              description: "",
              nullable: false,
            },
            num_days_completed: {
              type: "number",
              format: "float",
              description: "",
              nullable: false,
            },
            num_days_on_hold: {
              type: "number",
              format: "float",
              description: "",
              nullable: false,
            },
            num_days_dropped: {
              type: "number",
              format: "float",
              description: "",
              nullable: false,
            },
            num_days: {
              type: "number",
              format: "float",
              description: `num_watching_days + num_completed_days + num_on_hold_days + num_dropped_days
`,
              nullable: false,
            },
            num_episodes: {
              type: "integer",
              description: "",
              nullable: false,
            },
            num_times_rewatched: {
              type: "integer",
              description: "",
              nullable: false,
            },
            mean_score: {
              type: "number",
              format: "float",
              description: "",
              nullable: false,
            },
          },
          nullable: true,
        },
        time_zone: {
          type: "string",
          description: `for example: "America/Los_Angeles"
`,
          nullable: true,
        },
        is_supporter: {
          type: "boolean",
          description: "",
          nullable: true,
        },
      },
    },
  ],
} as const;

export const $UserAnimeList = {
  allOf: [
    {
      type: "object",
      properties: {
        data: {
          type: "array",
          items: {
            $ref: "#/components/schemas/UserAnimeListEdge",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/List",
    },
  ],
} as const;

export const $UserAnimeListEdge = {
  type: "object",
  properties: {
    node: {
      $ref: "#/components/schemas/AnimeForList",
    },
    list_status: {
      $ref: "#/components/schemas/AnimeListStatus",
    },
  },
} as const;

export const $UserBase = {
  type: "object",
  description: "",
  properties: {
    id: {
      type: "integer",
      format: "int32",
      description: "",
      nullable: false,
    },
    name: {
      type: "string",
      description: "",
      nullable: false,
    },
    picture: {
      type: "string",
      format: "uri",
      description: "",
      nullable: false,
    },
  },
} as const;

export const $UserMangaList = {
  allOf: [
    {
      type: "object",
      properties: {
        data: {
          type: "array",
          items: {
            $ref: "#/components/schemas/UserMangaListEdge",
          },
        },
      },
    },
    {
      $ref: "#/components/schemas/List",
    },
  ],
} as const;

export const $UserMangaListEdge = {
  type: "object",
  properties: {
    node: {
      $ref: "#/components/schemas/MangaForList",
    },
    list_status: {
      $ref: "#/components/schemas/MangaListStatus",
    },
  },
} as const;

export const $WorkBase = {
  type: "object",
  properties: {
    id: {
      type: "integer",
      nullable: false,
    },
    title: {
      type: "string",
      description: "",
      nullable: false,
    },
    main_picture: {
      allOf: [
        {
          type: "object",
          description: "",
          nullable: true,
        },
        {
          $ref: "#/components/schemas/Picture",
        },
      ],
    },
  },
} as const;

export const $WorkForList = {
  allOf: [
    {
      $ref: "#/components/schemas/WorkBase",
    },
    {
      type: "object",
      description: "",
      properties: {
        alternative_titles: {
          type: "object",
          description: `"synonyms" or ISO 639-1
`,
          properties: {
            synonyms: {
              type: "array",
              description: "",
              items: {
                type: "string",
              },
              nullable: true,
            },
            en: {
              type: "string",
              description: "",
              nullable: true,
            },
            ja: {
              type: "string",
              description: "",
              nullable: true,
            },
          },
          nullable: true,
        },
        start_date: {
          type: "string",
          description: "",
          nullable: true,
        },
        end_date: {
          type: "string",
          description: "",
          nullable: true,
        },
        synopsis: {
          type: "string",
          description: `Synopsis.
 
The API strips BBCode tags from the result.
`,
          nullable: true,
        },
        mean: {
          type: "number",
          format: "float",
          description: `Mean score.

When the \`mean\` can not be calculated, such as when the number of user scores is small, the result does not include this field. 
`,
          nullable: true,
        },
        rank: {
          type: "integer",
          description: `When the \`rank\` can not be calculated, such as when the number of user scores is small, the result does not include this field. 
`,
          nullable: true,
        },
        popularity: {
          type: "integer",
          description: "",
          nullable: true,
        },
        num_list_users: {
          type: "integer",
          description: `Number of users who have this work in their list.
`,
          nullable: false,
        },
        num_scoring_users: {
          type: "integer",
          description: "",
          nullable: false,
        },
        nsfw: {
          type: "string",
          description: `| Value | Description |
| ---- | ---- |
| white | This work is safe for work |
| gray | This work may be not safe for work |
| black | This work is not safe for work |
`,
          nullable: true,
        },
        genres: {
          type: "array",
          description: "",
          items: {
            $ref: "#/components/schemas/Genre",
          },
          nullable: false,
        },
        created_at: {
          type: "string",
          format: "date-time",
          description: "",
          nullable: false,
        },
        updated_at: {
          type: "string",
          format: "date-time",
          description: "",
          nullable: false,
        },
      },
    },
  ],
} as const;
