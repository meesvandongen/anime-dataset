// This file is auto-generated by @hey-api/openapi-ts

export type AnimeForDetails = AnimeForList & {
  /**
   * You cannot contain this field in a list.
   *
   */
  pictures?: Array<Picture>;
  /**
   * The API strips BBCode tags from the result.
   *
   * You cannot contain this field in a list.
   *
   */
  background?: string | null;
  /**
   * You cannot contain this field in a list.
   *
   */
  related_anime?: Array<RelatedAnimeEdge>;
  /**
   * You cannot contain this field in a list.
   *
   */
  related_manga?: Array<RelatedMangaEdge>;
  /**
   * Summary of recommended anime for those who like this anime.
   *
   * You cannot contain this field in a list.
   *
   */
  recommendations?: Array<AnimeRecommendationAggregationEdgeBase>;
  statistics?: Record<string, unknown> | (null & AnimeStatistics);
};

export type AnimeForList = WorkForList & {
  /**
   * - unknown
   * - tv
   * - ova
   * - movie
   * - special
   * - ona
   * - music
   *
   */
  media_type?: string;
  /**
   * Airing status.
   *
   * - finished_airing
   * - currently_airing
   * - not_yet_aired
   *
   */
  status?: string;
  my_list_status?: Record<string, unknown> | (null & AnimeListStatus);
  /**
   * The total number of episodes of this series. If unknown, it is 0.
   *
   */
  num_episodes?: number;
  start_season?: unknown & AnimeSeason;
  /**
   * Broadcast date.
   *
   */
  broadcast?: {
    /**
     * Day of the week broadcast in Japan time.
     *
     * Day of the week or `other`
     *
     */
    day_of_the_week?: string;
    /**
     * for example: "01:25"
     *
     */
    start_time?: string | null;
  } | null;
  /**
   * Original work.
   *
   * - other
   * - original
   * - manga
   * - 4_koma_manga
   * - web_manga
   * - digital_manga
   * - novel
   * - light_novel
   * - visual_novel
   * - game
   * - card_game
   * - book
   * - picture_book
   * - radio
   * - music
   *
   */
  source?: string | null;
  /**
   * Average length of episode in seconds.
   *
   */
  average_episode_duration?: number | null;
  /**
   * | Value | Description |
   * | ---- | ---- |
   * | g | G - All Ages |
   * | pg | PG - Children |
   * | pg_13 | pg_13 - Teens 13 and Older |
   * | r | R - 17+ (violence & profanity) |
   * | r+ | R+ - Profanity & Mild Nudity |
   * | rx | Rx - Hentai |
   *
   */
  rating?: string | null;
  studios?: Array<AnimeStudio>;
};

export type AnimeList = {
  data?: Array<{
    node?: AnimeForList;
  }>;
} & List;

export type AnimeListForRanking = {
  data?: Array<{
    node?: AnimeForList;
    ranking?: RankingInfo;
  }>;
} & List;

export type AnimeListStatus = {
  /**
   * - watching
   * - completed
   * - on_hold
   * - dropped
   * - plan_to_watch
   *
   */
  status?: string | null;
  /**
   * 0-10
   *
   */
  score?: number;
  /**
   * 0 or the number of watched episodes.
   *
   */
  num_episodes_watched?: number;
  /**
   * If authorized user watches an anime again after completion, this field value is true.
   *
   * In this case, MyAnimeList treats the anime as 'watching' in the user's anime list.
   *
   */
  is_rewatching?: boolean;
  start_date?: string | null;
  finish_date?: string | null;
  priority?: number;
  num_times_rewatched?: number;
  rewatch_value?: number;
  tags?: Array<string>;
  /**
   * You cannot contain this field in a list.
   *
   */
  comments?: string;
  updated_at?: string;
};

export type AnimeRecommendationAggregationEdgeBase = {
  node?: AnimeForList;
  num_recommendations?: number;
};

export type AnimeSeason = {
  year?: number;
  season?: "winter" | "spring" | "summer" | "fall";
};

export type AnimeStatistics = {
  num_list_users?: number;
  status?: {
    watching?: number;
    completed?: number;
    on_hold?: number;
    dropped?: number;
    plan_to_watch?: number;
  };
};

export type AnimeStudio = {
  id?: number;
  name?: string;
};

/**
 * date.
 */
export type Date = string;

export type ForumBoard = {
  id?: number;
  title?: string;
  description?: string;
  subboards?: Array<ForumSubboard>;
};

export type ForumBoards = {
  categories?: Array<ForumCategory>;
};

export type ForumCategory = {
  title?: string;
  boards?: Array<ForumBoard>;
};

export type ForumSubboard = {
  id?: number;
  title?: string;
};

export type ForumTopic = {
  data?: Array<ForumTopicData>;
  paging?: ForumTopicPaging;
};

export type ForumTopicData = {
  title?: string;
  posts?: Array<ForumTopicPost>;
  poll?: Array<ForumTopicPoll> | null;
};

export type ForumTopicPaging = {
  previous?: string | null;
  next?: string | null;
};

export type ForumTopicPoll = {
  id?: number;
  question?: string;
  close?: boolean;
  options?: Array<ForumTopicPollOption>;
};

export type ForumTopicPollOption = {
  id?: number;
  text?: string;
  votes?: number;
};

export type ForumTopicPost = {
  id?: number;
  number?: number;
  created_at?: string;
  created_by?: ForumTopicPostCreatedBy;
  body?: string;
  signature?: string;
};

export type ForumTopicPostCreatedBy = {
  id?: number;
  name?: string;
  forum_avator?: string;
};

export type ForumTopics = {
  data?: Array<ForumTopicsData>;
  paging?: ForumTopicPaging;
};

export type ForumTopicsCreatedBy = {
  id?: number;
  name?: string;
};

export type ForumTopicsData = {
  id?: number;
  title?: string;
  created_at?: string;
  created_by?: ForumTopicsCreatedBy;
  number_of_posts?: number;
  last_post_created_at?: string;
  last_post_created_by?: ForumTopicsCreatedBy;
  is_locked?: boolean;
};

export type Genre = {
  id?: number;
  name?: string;
};

export type List = {
  paging?: {
    previous?: string;
    next?: string;
  };
};

export type Magazine = {
  id?: number;
  name?: string;
};

export type MangaForDetails = MangaForList & {
  /**
   * You cannot contain this field in a list.
   *
   */
  pictures?: Array<Picture>;
  /**
   * The API strips BBCode tags from the result.
   *
   * You cannot contain this field in a list.
   *
   */
  background?: string | null;
  /**
   * You cannot contain this field in a list.
   *
   */
  related_anime?: Array<RelatedAnimeEdge>;
  /**
   * You cannot contain this field in a list.
   *
   */
  related_manga?: Array<RelatedMangaEdge>;
  /**
   * Summary of recommended anime for those who like this manga.
   *
   * You cannot contain this field in a list.
   *
   */
  recommendations?: Array<MangaRecommendationAggregationEdgeBase>;
  /**
   * You cannot contain this field in a list.
   *
   */
  serialization?: Array<MangaMagazineRelationEdge>;
};

export type MangaForList = WorkForList & {
  /**
   * - unknown
   * - manga
   * - novel
   * - one_shot
   * - doujinshi
   * - manhwa
   * - manhua
   * - oel
   *
   */
  media_type?: string;
  /**
   * Publishing status.
   *
   * - finished
   * - currently_publishing
   * - not_yet_published
   *
   */
  status?: string;
  my_list_status?: Record<string, unknown> | (null & MangaListStatus);
  /**
   * If unknown, it is 0.
   *
   */
  num_volumes?: number;
  /**
   * If unknown, it is 0.
   *
   */
  num_chapters?: number;
  authors?: Array<PersonRoleEdge>;
};

export type MangaList = {
  data?: Array<{
    node?: MangaForList;
  }>;
} & List;

export type MangaListForRanking = {
  data?: Array<{
    node?: MangaForList;
    ranking?: RankingInfo;
  }>;
} & List;

export type MangaListStatus = {
  /**
   * - reading
   * - completed
   * - on_hold
   * - dropped
   * - plan_to_read
   *
   */
  status?: string | null;
  /**
   * 0-10
   *
   */
  score?: number;
  /**
   * 0 or the number of read volumes.
   *
   */
  num_volumes_read?: number;
  /**
   * 0 or the number of read chapters.
   *
   */
  num_chapters_read?: number;
  /**
   * If authorized user reads an manga again after completion, this field value is true.
   *
   * In this case, MyAnimeList treats the manga as 'reading' in the user's manga list.
   *
   */
  is_rereading?: boolean;
  start_date?: string | null;
  finish_date?: string | null;
  priority?: number;
  num_times_reread?: number;
  reread_value?: number;
  tags?: Array<string>;
  /**
   * You cannot contain this field in a list.
   *
   */
  comments?: string;
  updated_at?: string;
};

export type MangaMagazineRelationEdge = {
  node?: Magazine;
  role?: string;
};

export type MangaRecommendationAggregationEdgeBase = {
  node?: MangaForList;
  num_recommendations?: number;
};

export type PersonBase = {
  id?: number;
  first_name?: string;
  last_name?: string;
};

export type PersonRoleEdge = {
  node?: PersonBase;
  role?: string;
};

export type Picture = {
  large?: string | null;
  medium?: string;
};

/**
 * Ranking information.
 *
 */
export type RankingInfo = {
  /**
   * Current rank.
   */
  rank?: number;
  /**
   * previous rank.
   */
  previous_rank?: number | null;
};

export type RelatedAnimeEdge = {
  node?: AnimeForList;
  /**
   * The type of the relationship between this work and related work.
   *
   * - sequel
   * - prequel
   * - alternative_setting
   * - alternative_version
   * - side_story
   * - parent_story
   * - summary
   * - full_story
   *
   */
  relation_type?: string;
  /**
   * The format of relation_type for human like "Alternative version".
   *
   */
  relation_type_formatted?: string;
};

export type RelatedMangaEdge = {
  node?: MangaForList;
  /**
   * The type of the relationship between this work and related work.
   *
   * - sequel
   * - prequel
   * - alternative_setting
   * - alternative_version
   * - side_story
   * - parent_story
   * - summary
   * - full_story
   *
   */
  relation_type?: string;
  /**
   * The format of relation_type for human like "Alternative version".
   *
   */
  relation_type_formatted?: string;
};

export type User = UserBase & {
  gender?: string | null;
  birthday?: string | null;
  location?: string | null;
  joined_at?: string;
  anime_statistics?: {
    num_items_watching?: number;
    num_items_completed?: number;
    num_items_on_hold?: number;
    num_items_dropped?: number;
    num_items_plan_to_watch?: number;
    num_items?: number;
    num_days_watched?: number;
    num_days_watching?: number;
    num_days_completed?: number;
    num_days_on_hold?: number;
    num_days_dropped?: number;
    /**
     * num_watching_days + num_completed_days + num_on_hold_days + num_dropped_days
     *
     */
    num_days?: number;
    num_episodes?: number;
    num_times_rewatched?: number;
    mean_score?: number;
  } | null;
  /**
   * for example: "America/Los_Angeles"
   *
   */
  time_zone?: string | null;
  is_supporter?: boolean | null;
};

export type UserAnimeList = {
  data?: Array<UserAnimeListEdge>;
} & List;

export type UserAnimeListEdge = {
  node?: AnimeForList;
  list_status?: AnimeListStatus;
};

export type UserBase = {
  id?: number;
  name?: string;
  picture?: string;
};

export type UserMangaList = {
  data?: Array<UserMangaListEdge>;
} & List;

export type UserMangaListEdge = {
  node?: MangaForList;
  list_status?: MangaListStatus;
};

export type WorkBase = {
  id?: number;
  title?: string;
  main_picture?: Record<string, unknown> | (null & Picture);
};

export type WorkForList = WorkBase & {
  /**
   * "synonyms" or ISO 639-1
   *
   */
  alternative_titles?: {
    synonyms?: Array<string> | null;
    en?: string | null;
    ja?: string | null;
  } | null;
  start_date?: string | null;
  end_date?: string | null;
  /**
   * Synopsis.
   *
   * The API strips BBCode tags from the result.
   *
   */
  synopsis?: string | null;
  /**
   * Mean score.
   *
   * When the `mean` can not be calculated, such as when the number of user scores is small, the result does not include this field.
   *
   */
  mean?: number | null;
  /**
   * When the `rank` can not be calculated, such as when the number of user scores is small, the result does not include this field.
   *
   */
  rank?: number | null;
  popularity?: number | null;
  /**
   * Number of users who have this work in their list.
   *
   */
  num_list_users?: number;
  num_scoring_users?: number;
  /**
   * | Value | Description |
   * | ---- | ---- |
   * | white | This work is safe for work |
   * | gray | This work may be not safe for work |
   * | black | This work is not safe for work |
   *
   */
  nsfw?: string | null;
  genres?: Array<Genre>;
  created_at?: string;
  updated_at?: string;
};

export type $OpenApiTs = {
  "/anime": {
    get: {
      req: {
        fields?: string;
        /**
         * The maximum value is 100.
         *
         */
        limit?: number;
        nsfw?: boolean;
        offset?: number;
        /**
         * Search.
         *
         */
        q?: string;
      };
      res: {
        /**
         * OK
         */
        200: AnimeList;
      };
    };
  };
  "/anime/{anime_id}": {
    get: {
      req: {
        animeId: number;
        fields?: string;
      };
      res: {
        /**
         * OK
         */
        200: AnimeForDetails;
      };
    };
  };
  "/anime/ranking": {
    get: {
      req: {
        fields?: string;
        /**
         * The maximum value is 500.
         *
         */
        limit?: number;
        nsfw?: boolean;
        offset?: number;
        /**
         * | value | |
         * | ---- | ---- |
         * | all | Top Anime Series |
         * | airing | Top Airing Anime |
         * | upcoming | Top Upcoming Anime |
         * | tv | Top Anime TV Series |
         * | ova | Top Anime OVA Series |
         * | movie | Top Anime Movies |
         * | special | Top Anime Specials |
         * | bypopularity | Top Anime by Popularity |
         * | favorite | Top Favorited Anime |
         *
         */
        rankingType: string;
      };
      res: {
        /**
         * OK
         */
        200: AnimeListForRanking;
      };
    };
  };
  "/anime/season/{year}/{season}": {
    get: {
      req: {
        fields?: string;
        /**
         * The maximum value is 500.
         */
        limit?: number;
        nsfw?: boolean;
        offset?: number;
        season: string;
        /**
         * Valid values:
         *
         * | Value | Order |
         * | ---- | ---- |
         * | `anime_score` | Descending |
         * | `anime_num_list_users` | Descending |
         *
         */
        sort?: string;
        year: number;
      };
      res: {
        /**
         * OK
         */
        200: AnimeList;
      };
    };
  };
  "/anime/suggestions": {
    get: {
      req: {
        fields?: string;
        /**
         * The maximum value is 100.
         */
        limit?: number;
        offset?: number;
      };
      res: {
        /**
         * OK.
         */
        200: AnimeList;
      };
    };
  };
  "/anime/{anime_id}/my_list_status": {
    patch: {
      req: {
        animeId: number;
        formData?: {
          /**
           * - watching
           * - completed
           * - on_hold
           * - dropped
           * - plan_to_watch
           *
           */
          status?: string;
          is_rewatching?: boolean;
          /**
           * 0-10
           *
           */
          score?: number;
          num_watched_episodes?: number;
          /**
           * 0-2
           *
           */
          priority?: number;
          num_times_rewatched?: number;
          /**
           * 0-5
           *
           */
          rewatch_value?: number;
          tags?: string;
          comments?: string;
        };
      };
      res: {
        /**
         * OK
         */
        200: AnimeListStatus;
      };
    };
    delete: {
      req: {
        animeId: number;
      };
      res: {
        /**
         * OK
         */
        200: any;
      };
    };
  };
  "/users/{user_name}/animelist": {
    get: {
      req: {
        /**
         * The maximum value is 1000.
         *
         */
        limit?: number;
        offset?: number;
        /**
         * Valid values:
         *
         * | Value | Order |
         * | ---- | ---- |
         * | `list_score` | Descending |
         * | `list_updated_at` | Descending |
         * | `anime_title` | Ascending |
         * | `anime_start_date` | Descending |
         * | `anime_id` (Under Development) | Ascending |
         *
         */
        sort?: string;
        /**
         * Filters returned anime list by these statuses.
         *
         * To return all anime, don't specify this field.
         *
         * Valid values:
         *
         * - watching
         * - completed
         * - on_hold
         * - dropped
         * - plan_to_watch
         *
         */
        status?: string;
        /**
         * User name or `@me`.
         *
         */
        userName: string;
      };
      res: {
        /**
         * OK
         */
        200: UserAnimeList;
      };
    };
  };
  "/forum/boards": {
    get: {
      res: {
        /**
         * OK
         */
        200: ForumBoards;
      };
    };
  };
  "/forum/topic/{topic_id}": {
    get: {
      req: {
        limit?: number;
        offset?: number;
        topicId: number;
      };
      res: {
        /**
         * OK
         */
        200: ForumTopic;
      };
    };
  };
  "/forum/topics": {
    get: {
      req: {
        boardId?: number;
        limit?: number;
        offset?: number;
        q?: string;
        /**
         * Currently, only "recent" can be set.
         */
        sort?: string;
        subboardId?: number;
        topicUserName?: string;
        userName?: string;
      };
      res: {
        /**
         * OK
         */
        200: ForumTopics;
      };
    };
  };
  "/manga": {
    get: {
      req: {
        fields?: string;
        /**
         * The maximum value is 100.
         *
         */
        limit?: number;
        nsfw?: boolean;
        offset?: number;
        /**
         * Search.
         *
         */
        q?: string;
      };
      res: {
        /**
         * OK
         */
        200: MangaList;
      };
    };
  };
  "/manga/{manga_id}": {
    get: {
      req: {
        fields?: string;
        mangaId: number;
      };
      res: {
        /**
         * OK
         */
        200: MangaForDetails;
      };
    };
  };
  "/manga/ranking": {
    get: {
      req: {
        fields?: string;
        /**
         * The maximum value is 500.
         *
         */
        limit?: number;
        nsfw?: boolean;
        offset?: number;
        /**
         * | value | |
         * | ---- | ---- |
         * | all | All |
         * | manga | Top Manga |
         * | novels | Top Novels |
         * | oneshots | Top One-shots |
         * | doujin | Top Doujinshi |
         * | manhwa | Top Manhwa |
         * | manhua | Top Manhua |
         * | bypopularity | Most Popular |
         * | favorite | Most Favorited |
         *
         */
        rankingType: string;
      };
      res: {
        /**
         * OK
         */
        200: MangaListForRanking;
      };
    };
  };
  "/manga/{manga_id}/my_list_status": {
    patch: {
      req: {
        formData?: {
          /**
           * - reading
           * - completed
           * - on_hold
           * - dropped
           * - plan_to_read
           *
           */
          status?: string;
          is_rereading?: boolean;
          /**
           * 0-10
           */
          score?: number;
          num_volumes_read?: number;
          num_chapters_read?: number;
          /**
           * 0-2
           *
           */
          priority?: number;
          num_times_reread?: number;
          /**
           * 0-5
           *
           */
          reread_value?: number;
          tags?: string;
          comments?: string;
        };
        mangaId: number;
      };
      res: {
        /**
         * OK
         */
        200: MangaListStatus;
      };
    };
    delete: {
      req: {
        mangaId: number;
      };
      res: {
        /**
         * OK
         */
        200: any;
      };
    };
  };
  "/users/{user_name}/mangalist": {
    get: {
      req: {
        /**
         * The maximum value is 1000.
         *
         */
        limit?: number;
        offset?: number;
        /**
         * Valid values:
         *
         * | Value | Order |
         * | ---- | ---- |
         * | `list_score` | Descending |
         * | `list_updated_at` | Descending |
         * | `manga_title` | Ascending |
         * | `manga_start_date` | Descending |
         * | `manga_id` (Under Development) | Ascending |
         *
         */
        sort?: string;
        /**
         * Filters returned manga list by these statuses.
         *
         * To return all manga, don't specify this field.
         *
         * Valid values:
         *
         * - reading
         * - completed
         * - on_hold
         * - dropped
         * - plan_to_read
         *
         */
        status?: string;
        /**
         * User name or `@me`.
         *
         */
        userName: string;
      };
      res: {
        /**
         * OK
         */
        200: UserMangaList;
      };
    };
  };
  "/users/{user_name}": {
    get: {
      req: {
        fields?: string;
        /**
         * You can only specify `@me`.
         *
         */
        userId: string;
      };
      res: {
        /**
         * OK
         */
        200: User;
      };
    };
  };
};
